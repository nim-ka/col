const { s16, sins, coss, atan2s } = require("./math.js")
const { Surface } = require("./surface.js")
const col = require("./collision.js")
const Controller = require("./controller.js")

class Mario {
	static ACT_UNINITIALIZED              = 0x00000000 // (0x000)

	// group 0x000: stationary actions
	static ACT_IDLE                       = 0x0C400201 // (0x001 | ACT_FLAG_STATIONARY | ACT_FLAG_IDLE | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_START_SLEEPING             = 0x0C400202 // (0x002 | ACT_FLAG_STATIONARY | ACT_FLAG_IDLE | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_SLEEPING                   = 0x0C000203 // (0x003 | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_WAKING_UP                  = 0x0C000204 // (0x004 | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_PANTING                    = 0x0C400205 // (0x005 | ACT_FLAG_STATIONARY | ACT_FLAG_IDLE | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_HOLD_PANTING_UNUSED        = 0x08000206 // (0x006 | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_HOLD_IDLE                  = 0x08000207 // (0x007 | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_HOLD_HEAVY_IDLE            = 0x08000208 // (0x008 | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_STANDING_AGAINST_WALL      = 0x0C400209 // (0x009 | ACT_FLAG_STATIONARY | ACT_FLAG_IDLE | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_COUGHING                   = 0x0C40020A // (0x00A | ACT_FLAG_STATIONARY | ACT_FLAG_IDLE | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_SHIVERING                  = 0x0C40020B // (0x00B | ACT_FLAG_STATIONARY | ACT_FLAG_IDLE | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_IN_QUICKSAND               = 0x0002020D // (0x00D | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_UNKNOWN_0002020E           = 0x0002020E // (0x00E | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_CROUCHING                  = 0x0C008220 // (0x020 | ACT_FLAG_STATIONARY | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_START_CROUCHING            = 0x0C008221 // (0x021 | ACT_FLAG_STATIONARY | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_STOP_CROUCHING             = 0x0C008222 // (0x022 | ACT_FLAG_STATIONARY | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_START_CRAWLING             = 0x0C008223 // (0x023 | ACT_FLAG_STATIONARY | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_STOP_CRAWLING              = 0x0C008224 // (0x024 | ACT_FLAG_STATIONARY | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_SLIDE_KICK_SLIDE_STOP      = 0x08000225 // (0x025 | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_SHOCKWAVE_BOUNCE           = 0x00020226 // (0x026 | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_FIRST_PERSON               = 0x0C000227 // (0x027 | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_BACKFLIP_LAND_STOP         = 0x0800022F // (0x02F | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_JUMP_LAND_STOP             = 0x0C000230 // (0x030 | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_DOUBLE_JUMP_LAND_STOP      = 0x0C000231 // (0x031 | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_FREEFALL_LAND_STOP         = 0x0C000232 // (0x032 | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_SIDE_FLIP_LAND_STOP        = 0x0C000233 // (0x033 | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_HOLD_JUMP_LAND_STOP        = 0x08000234 // (0x034 | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_HOLD_FREEFALL_LAND_STOP    = 0x08000235 // (0x035 | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_AIR_THROW_LAND             = 0x80000A36 // (0x036 | ACT_FLAG_STATIONARY | ACT_FLAG_AIR | ACT_FLAG_THROWING)
	static ACT_TWIRL_LAND                 = 0x18800238 // (0x038 | ACT_FLAG_STATIONARY | ACT_FLAG_ATTACKING | ACT_FLAG_PAUSE_EXIT | ACT_FLAG_SWIMMING_OR_FLYING)
	static ACT_LAVA_BOOST_LAND            = 0x08000239 // (0x039 | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_TRIPLE_JUMP_LAND_STOP      = 0x0800023A // (0x03A | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_LONG_JUMP_LAND_STOP        = 0x0800023B // (0x03B | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_GROUND_POUND_LAND          = 0x0080023C // (0x03C | ACT_FLAG_STATIONARY | ACT_FLAG_ATTACKING)
	static ACT_BRAKING_STOP               = 0x0C00023D // (0x03D | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_BUTT_SLIDE_STOP            = 0x0C00023E // (0x03E | ACT_FLAG_STATIONARY | ACT_FLAG_ALLOW_FIRST_PERSON | ACT_FLAG_PAUSE_EXIT)
	static ACT_HOLD_BUTT_SLIDE_STOP       = 0x0800043F // (0x03F | ACT_FLAG_MOVING | ACT_FLAG_PAUSE_EXIT)

	// group 0x040: moving (ground) actions
	static ACT_WALKING                    = 0x04000440 // (0x040 | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_HOLD_WALKING               = 0x00000442 // (0x042 | ACT_FLAG_MOVING)
	static ACT_TURNING_AROUND             = 0x00000443 // (0x043 | ACT_FLAG_MOVING)
	static ACT_FINISH_TURNING_AROUND      = 0x00000444 // (0x044 | ACT_FLAG_MOVING)
	static ACT_BRAKING                    = 0x04000445 // (0x045 | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_RIDING_SHELL_GROUND        = 0x20810446 // (0x046 | ACT_FLAG_MOVING | ACT_FLAG_RIDING_SHELL | ACT_FLAG_ATTACKING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_HOLD_HEAVY_WALKING         = 0x00000447 // (0x047 | ACT_FLAG_MOVING)
	static ACT_CRAWLING                   = 0x04008448 // (0x048 | ACT_FLAG_MOVING | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_BURNING_GROUND             = 0x00020449 // (0x049 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_DECELERATING               = 0x0400044A // (0x04A | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_HOLD_DECELERATING          = 0x0000044B // (0x04B | ACT_FLAG_MOVING)
	static ACT_BEGIN_SLIDING              = 0x00000050 // (0x050)
	static ACT_HOLD_BEGIN_SLIDING         = 0x00000051 // (0x051)
	static ACT_BUTT_SLIDE                 = 0x00840452 // (0x052 | ACT_FLAG_MOVING | ACT_FLAG_BUTT_OR_STOMACH_SLIDE | ACT_FLAG_ATTACKING)
	static ACT_STOMACH_SLIDE              = 0x008C0453 // (0x053 | ACT_FLAG_MOVING | ACT_FLAG_BUTT_OR_STOMACH_SLIDE | ACT_FLAG_DIVING | ACT_FLAG_ATTACKING)
	static ACT_HOLD_BUTT_SLIDE            = 0x00840454 // (0x054 | ACT_FLAG_MOVING | ACT_FLAG_BUTT_OR_STOMACH_SLIDE | ACT_FLAG_ATTACKING)
	static ACT_HOLD_STOMACH_SLIDE         = 0x008C0455 // (0x055 | ACT_FLAG_MOVING | ACT_FLAG_BUTT_OR_STOMACH_SLIDE | ACT_FLAG_DIVING | ACT_FLAG_ATTACKING)
	static ACT_DIVE_SLIDE                 = 0x00880456 // (0x056 | ACT_FLAG_MOVING | ACT_FLAG_DIVING | ACT_FLAG_ATTACKING)
	static ACT_MOVE_PUNCHING              = 0x00800457 // (0x057 | ACT_FLAG_MOVING | ACT_FLAG_ATTACKING)
	static ACT_CROUCH_SLIDE               = 0x04808459 // (0x059 | ACT_FLAG_MOVING | ACT_FLAG_SHORT_HITBOX | ACT_FLAG_ATTACKING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_SLIDE_KICK_SLIDE           = 0x0080045A // (0x05A | ACT_FLAG_MOVING | ACT_FLAG_ATTACKING)
	static ACT_HARD_BACKWARD_GROUND_KB    = 0x00020460 // (0x060 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_HARD_FORWARD_GROUND_KB     = 0x00020461 // (0x061 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_BACKWARD_GROUND_KB         = 0x00020462 // (0x062 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_FORWARD_GROUND_KB          = 0x00020463 // (0x063 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_SOFT_BACKWARD_GROUND_KB    = 0x00020464 // (0x064 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_SOFT_FORWARD_GROUND_KB     = 0x00020465 // (0x065 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_GROUND_BONK                = 0x00020466 // (0x066 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_DEATH_EXIT_LAND            = 0x00020467 // (0x067 | ACT_FLAG_MOVING | ACT_FLAG_INVULNERABLE)
	static ACT_JUMP_LAND                  = 0x04000470 // (0x070 | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_FREEFALL_LAND              = 0x04000471 // (0x071 | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_DOUBLE_JUMP_LAND           = 0x04000472 // (0x072 | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_SIDE_FLIP_LAND             = 0x04000473 // (0x073 | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_HOLD_JUMP_LAND             = 0x00000474 // (0x074 | ACT_FLAG_MOVING)
	static ACT_HOLD_FREEFALL_LAND         = 0x00000475 // (0x075 | ACT_FLAG_MOVING)
	static ACT_QUICKSAND_JUMP_LAND        = 0x00000476 // (0x076 | ACT_FLAG_MOVING)
	static ACT_HOLD_QUICKSAND_JUMP_LAND   = 0x00000477 // (0x077 | ACT_FLAG_MOVING)
	static ACT_TRIPLE_JUMP_LAND           = 0x04000478 // (0x078 | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_LONG_JUMP_LAND             = 0x00000479 // (0x079 | ACT_FLAG_MOVING)
	static ACT_BACKFLIP_LAND              = 0x0400047A // (0x07A | ACT_FLAG_MOVING | ACT_FLAG_ALLOW_FIRST_PERSON)

	// group 0x080: airborne actions
	static ACT_JUMP                       = 0x03000880 // (0x080 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_DOUBLE_JUMP                = 0x03000881 // (0x081 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_TRIPLE_JUMP                = 0x01000882 // (0x082 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_BACKFLIP                   = 0x01000883 // (0x083 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_STEEP_JUMP                 = 0x03000885 // (0x085 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_WALL_KICK_AIR              = 0x03000886 // (0x086 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_SIDE_FLIP                  = 0x01000887 // (0x087 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_LONG_JUMP                  = 0x03000888 // (0x088 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_WATER_JUMP                 = 0x01000889 // (0x089 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_DIVE                       = 0x0188088A // (0x08A | ACT_FLAG_AIR | ACT_FLAG_DIVING | ACT_FLAG_ATTACKING | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_FREEFALL                   = 0x0100088C // (0x08C | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_TOP_OF_POLE_JUMP           = 0x0300088D // (0x08D | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_BUTT_SLIDE_AIR             = 0x0300088E // (0x08E | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_FLYING_TRIPLE_JUMP         = 0x03000894 // (0x094 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_SHOT_FROM_CANNON           = 0x00880898 // (0x098 | ACT_FLAG_AIR | ACT_FLAG_DIVING | ACT_FLAG_ATTACKING)
	static ACT_FLYING                     = 0x10880899 // (0x099 | ACT_FLAG_AIR | ACT_FLAG_DIVING | ACT_FLAG_ATTACKING | ACT_FLAG_SWIMMING_OR_FLYING)
	static ACT_RIDING_SHELL_JUMP          = 0x0281089A // (0x09A | ACT_FLAG_AIR | ACT_FLAG_RIDING_SHELL | ACT_FLAG_ATTACKING | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_RIDING_SHELL_FALL          = 0x0081089B // (0x09B | ACT_FLAG_AIR | ACT_FLAG_RIDING_SHELL | ACT_FLAG_ATTACKING)
	static ACT_VERTICAL_WIND              = 0x1008089C // (0x09C | ACT_FLAG_AIR | ACT_FLAG_DIVING | ACT_FLAG_SWIMMING_OR_FLYING)
	static ACT_HOLD_JUMP                  = 0x030008A0 // (0x0A0 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_HOLD_FREEFALL              = 0x010008A1 // (0x0A1 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_HOLD_BUTT_SLIDE_AIR        = 0x010008A2 // (0x0A2 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_HOLD_WATER_JUMP            = 0x010008A3 // (0x0A3 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_TWIRLING                   = 0x108008A4 // (0x0A4 | ACT_FLAG_AIR | ACT_FLAG_ATTACKING | ACT_FLAG_SWIMMING_OR_FLYING)
	static ACT_FORWARD_ROLLOUT            = 0x010008A6 // (0x0A6 | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_AIR_HIT_WALL               = 0x000008A7 // (0x0A7 | ACT_FLAG_AIR)
	static ACT_RIDING_HOOT                = 0x000004A8 // (0x0A8 | ACT_FLAG_MOVING)
	static ACT_GROUND_POUND               = 0x008008A9 // (0x0A9 | ACT_FLAG_AIR | ACT_FLAG_ATTACKING)
	static ACT_SLIDE_KICK                 = 0x018008AA // (0x0AA | ACT_FLAG_AIR | ACT_FLAG_ATTACKING | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_AIR_THROW                  = 0x830008AB // (0x0AB | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT | ACT_FLAG_THROWING)
	static ACT_JUMP_KICK                  = 0x018008AC // (0x0AC | ACT_FLAG_AIR | ACT_FLAG_ATTACKING | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_BACKWARD_ROLLOUT           = 0x010008AD // (0x0AD | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_CRAZY_BOX_BOUNCE           = 0x000008AE // (0x0AE | ACT_FLAG_AIR)
	static ACT_SPECIAL_TRIPLE_JUMP        = 0x030008AF // (0x0AF | ACT_FLAG_AIR | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION | ACT_FLAG_CONTROL_JUMP_HEIGHT)
	static ACT_BACKWARD_AIR_KB            = 0x010208B0 // (0x0B0 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_FORWARD_AIR_KB             = 0x010208B1 // (0x0B1 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_HARD_FORWARD_AIR_KB        = 0x010208B2 // (0x0B2 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_HARD_BACKWARD_AIR_KB       = 0x010208B3 // (0x0B3 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_BURNING_JUMP               = 0x010208B4 // (0x0B4 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_BURNING_FALL               = 0x010208B5 // (0x0B5 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_SOFT_BONK                  = 0x010208B6 // (0x0B6 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_LAVA_BOOST                 = 0x010208B7 // (0x0B7 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_GETTING_BLOWN              = 0x010208B8 // (0x0B8 | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_THROWN_FORWARD             = 0x010208BD // (0x0BD | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)
	static ACT_THROWN_BACKWARD            = 0x010208BE // (0x0BE | ACT_FLAG_AIR | ACT_FLAG_INVULNERABLE | ACT_FLAG_ALLOW_VERTICAL_WIND_ACTION)

	// group 0x0C0: submerged actions
	static ACT_WATER_IDLE                 = 0x380022C0 // (0x0C0 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_PAUSE_EXIT | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_HOLD_WATER_IDLE            = 0x380022C1 // (0x0C1 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_PAUSE_EXIT | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_WATER_ACTION_END           = 0x300022C2 // (0x0C2 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_HOLD_WATER_ACTION_END      = 0x300022C3 // (0x0C3 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_DROWNING                   = 0x300032C4 // (0x0C4 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_BACKWARD_WATER_KB          = 0x300222C5 // (0x0C5 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_INVULNERABLE | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_FORWARD_WATER_KB           = 0x300222C6 // (0x0C6 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_INVULNERABLE | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_WATER_DEATH                = 0x300032C7 // (0x0C7 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_WATER_SHOCKED              = 0x300222C8 // (0x0C8 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_INVULNERABLE | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_BREASTSTROKE               = 0x300024D0 // (0x0D0 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_SWIMMING_END               = 0x300024D1 // (0x0D1 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_FLUTTER_KICK               = 0x300024D2 // (0x0D2 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_HOLD_BREASTSTROKE          = 0x300024D3 // (0x0D3 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_HOLD_SWIMMING_END          = 0x300024D4 // (0x0D4 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_HOLD_FLUTTER_KICK          = 0x300024D5 // (0x0D5 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_WATER_SHELL_SWIMMING       = 0x300024D6 // (0x0D6 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_WATER_THROW                = 0x300024E0 // (0x0E0 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_WATER_PUNCH                = 0x300024E1 // (0x0E1 | ACT_FLAG_MOVING | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_WATER_PLUNGE               = 0x300022E2 // (0x0E2 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_CAUGHT_IN_WHIRLPOOL        = 0x300222E3 // (0x0E3 | ACT_FLAG_STATIONARY | ACT_FLAG_SWIMMING | ACT_FLAG_INVULNERABLE | ACT_FLAG_SWIMMING_OR_FLYING | ACT_FLAG_WATER_OR_TEXT)
	static ACT_METAL_WATER_STANDING       = 0x080042F0 // (0x0F0 | ACT_FLAG_STATIONARY | ACT_FLAG_METAL_WATER | ACT_FLAG_PAUSE_EXIT)
	static ACT_HOLD_METAL_WATER_STANDING  = 0x080042F1 // (0x0F1 | ACT_FLAG_STATIONARY | ACT_FLAG_METAL_WATER | ACT_FLAG_PAUSE_EXIT)
	static ACT_METAL_WATER_WALKING        = 0x000044F2 // (0x0F2 | ACT_FLAG_MOVING | ACT_FLAG_METAL_WATER)
	static ACT_HOLD_METAL_WATER_WALKING   = 0x000044F3 // (0x0F3 | ACT_FLAG_MOVING | ACT_FLAG_METAL_WATER)
	static ACT_METAL_WATER_FALLING        = 0x000042F4 // (0x0F4 | ACT_FLAG_STATIONARY | ACT_FLAG_METAL_WATER)
	static ACT_HOLD_METAL_WATER_FALLING   = 0x000042F5 // (0x0F5 | ACT_FLAG_STATIONARY | ACT_FLAG_METAL_WATER)
	static ACT_METAL_WATER_FALL_LAND      = 0x000042F6 // (0x0F6 | ACT_FLAG_STATIONARY | ACT_FLAG_METAL_WATER)
	static ACT_HOLD_METAL_WATER_FALL_LAND = 0x000042F7 // (0x0F7 | ACT_FLAG_STATIONARY | ACT_FLAG_METAL_WATER)
	static ACT_METAL_WATER_JUMP           = 0x000044F8 // (0x0F8 | ACT_FLAG_MOVING | ACT_FLAG_METAL_WATER)
	static ACT_HOLD_METAL_WATER_JUMP      = 0x000044F9 // (0x0F9 | ACT_FLAG_MOVING | ACT_FLAG_METAL_WATER)
	static ACT_METAL_WATER_JUMP_LAND      = 0x000044FA // (0x0FA | ACT_FLAG_MOVING | ACT_FLAG_METAL_WATER)
	static ACT_HOLD_METAL_WATER_JUMP_LAND = 0x000044FB // (0x0FB | ACT_FLAG_MOVING | ACT_FLAG_METAL_WATER)

	// group 0x100: cutscene actions
	static ACT_DISAPPEARED                = 0x00001300 // (0x100 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_INTRO_CUTSCENE             = 0x04001301 // (0x101 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_ALLOW_FIRST_PERSON)
	static ACT_STAR_DANCE_EXIT            = 0x00001302 // (0x102 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_STAR_DANCE_WATER           = 0x00001303 // (0x103 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_FALL_AFTER_STAR_GRAB       = 0x00001904 // (0x104 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_READING_AUTOMATIC_DIALOG   = 0x20001305 // (0x105 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_WATER_OR_TEXT)
	static ACT_READING_NPC_DIALOG         = 0x20001306 // (0x106 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_WATER_OR_TEXT)
	static ACT_STAR_DANCE_NO_EXIT         = 0x00001307 // (0x107 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_READING_SIGN               = 0x00001308 // (0x108 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_JUMBO_STAR_CUTSCENE        = 0x00001909 // (0x109 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_WAITING_FOR_DIALOG         = 0x0000130A // (0x10A | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_DEBUG_FREE_MOVE            = 0x0000130F // (0x10F | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_STANDING_DEATH             = 0x00021311 // (0x111 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_INVULNERABLE)
	static ACT_QUICKSAND_DEATH            = 0x00021312 // (0x112 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_INVULNERABLE)
	static ACT_ELECTROCUTION              = 0x00021313 // (0x113 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_INVULNERABLE)
	static ACT_SUFFOCATION                = 0x00021314 // (0x114 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_INVULNERABLE)
	static ACT_DEATH_ON_STOMACH           = 0x00021315 // (0x115 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_INVULNERABLE)
	static ACT_DEATH_ON_BACK              = 0x00021316 // (0x116 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_INVULNERABLE)
	static ACT_EATEN_BY_BUBBA             = 0x00021317 // (0x117 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE | ACT_FLAG_INVULNERABLE)
	static ACT_END_PEACH_CUTSCENE         = 0x00001918 // (0x118 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_CREDITS_CUTSCENE           = 0x00001319 // (0x119 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_END_WAVING_CUTSCENE        = 0x0000131A // (0x11A | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_PULLING_DOOR               = 0x00001320 // (0x120 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_PUSHING_DOOR               = 0x00001321 // (0x121 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_WARP_DOOR_SPAWN            = 0x00001322 // (0x122 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_EMERGE_FROM_PIPE           = 0x00001923 // (0x123 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_SPAWN_SPIN_AIRBORNE        = 0x00001924 // (0x124 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_SPAWN_SPIN_LANDING         = 0x00001325 // (0x125 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_EXIT_AIRBORNE              = 0x00001926 // (0x126 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_EXIT_LAND_SAVE_DIALOG      = 0x00001327 // (0x127 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_DEATH_EXIT                 = 0x00001928 // (0x128 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_UNUSED_DEATH_EXIT          = 0x00001929 // (0x129 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_FALLING_DEATH_EXIT         = 0x0000192A // (0x12A | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_SPECIAL_EXIT_AIRBORNE      = 0x0000192B // (0x12B | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_SPECIAL_DEATH_EXIT         = 0x0000192C // (0x12C | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_FALLING_EXIT_AIRBORNE      = 0x0000192D // (0x12D | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_UNLOCKING_KEY_DOOR         = 0x0000132E // (0x12E | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_UNLOCKING_STAR_DOOR        = 0x0000132F // (0x12F | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_ENTERING_STAR_DOOR         = 0x00001331 // (0x131 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_SPAWN_NO_SPIN_AIRBORNE     = 0x00001932 // (0x132 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_SPAWN_NO_SPIN_LANDING      = 0x00001333 // (0x133 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_BBH_ENTER_JUMP             = 0x00001934 // (0x134 | ACT_FLAG_AIR | ACT_FLAG_INTANGIBLE)
	static ACT_BBH_ENTER_SPIN             = 0x00001535 // (0x135 | ACT_FLAG_MOVING | ACT_FLAG_INTANGIBLE)
	static ACT_TELEPORT_FADE_OUT          = 0x00001336 // (0x136 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_TELEPORT_FADE_IN           = 0x00001337 // (0x137 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_SHOCKED                    = 0x00020338 // (0x138 | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_SQUISHED                   = 0x00020339 // (0x139 | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_HEAD_STUCK_IN_GROUND       = 0x0002033A // (0x13A | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_BUTT_STUCK_IN_GROUND       = 0x0002033B // (0x13B | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_FEET_STUCK_IN_GROUND       = 0x0002033C // (0x13C | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_PUTTING_ON_CAP             = 0x0000133D // (0x13D | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)

	// group 0x140: "automatic" actions
	static ACT_HOLDING_POLE               = 0x08100340 // (0x140 | ACT_FLAG_STATIONARY | ACT_FLAG_ON_POLE | ACT_FLAG_PAUSE_EXIT)
	static ACT_GRAB_POLE_SLOW             = 0x00100341 // (0x141 | ACT_FLAG_STATIONARY | ACT_FLAG_ON_POLE)
	static ACT_GRAB_POLE_FAST             = 0x00100342 // (0x142 | ACT_FLAG_STATIONARY | ACT_FLAG_ON_POLE)
	static ACT_CLIMBING_POLE              = 0x00100343 // (0x143 | ACT_FLAG_STATIONARY | ACT_FLAG_ON_POLE)
	static ACT_TOP_OF_POLE_TRANSITION     = 0x00100344 // (0x144 | ACT_FLAG_STATIONARY | ACT_FLAG_ON_POLE)
	static ACT_TOP_OF_POLE                = 0x00100345 // (0x145 | ACT_FLAG_STATIONARY | ACT_FLAG_ON_POLE)
	static ACT_START_HANGING              = 0x08200348 // (0x148 | ACT_FLAG_STATIONARY | ACT_FLAG_HANGING | ACT_FLAG_PAUSE_EXIT)
	static ACT_HANGING                    = 0x00200349 // (0x149 | ACT_FLAG_STATIONARY | ACT_FLAG_HANGING)
	static ACT_HANG_MOVING                = 0x0020054A // (0x14A | ACT_FLAG_MOVING | ACT_FLAG_HANGING)
	static ACT_LEDGE_GRAB                 = 0x0800034B // (0x14B | ACT_FLAG_STATIONARY | ACT_FLAG_PAUSE_EXIT)
	static ACT_LEDGE_CLIMB_SLOW_1         = 0x0000054C // (0x14C | ACT_FLAG_MOVING)
	static ACT_LEDGE_CLIMB_SLOW_2         = 0x0000054D // (0x14D | ACT_FLAG_MOVING)
	static ACT_LEDGE_CLIMB_DOWN           = 0x0000054E // (0x14E | ACT_FLAG_MOVING)
	static ACT_LEDGE_CLIMB_FAST           = 0x0000054F // (0x14F | ACT_FLAG_MOVING)
	static ACT_GRABBED                    = 0x00020370 // (0x170 | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE)
	static ACT_IN_CANNON                  = 0x00001371 // (0x171 | ACT_FLAG_STATIONARY | ACT_FLAG_INTANGIBLE)
	static ACT_TORNADO_TWIRLING           = 0x10020372 // (0x172 | ACT_FLAG_STATIONARY | ACT_FLAG_INVULNERABLE | ACT_FLAG_SWIMMING_OR_FLYING)

	// group 0x180: object actions
	static ACT_PUNCHING                   = 0x00800380 // (0x180 | ACT_FLAG_STATIONARY | ACT_FLAG_ATTACKING)
	static ACT_PICKING_UP                 = 0x00000383 // (0x183 | ACT_FLAG_STATIONARY)
	static ACT_DIVE_PICKING_UP            = 0x00000385 // (0x185 | ACT_FLAG_STATIONARY)
	static ACT_STOMACH_SLIDE_STOP         = 0x00000386 // (0x186 | ACT_FLAG_STATIONARY)
	static ACT_PLACING_DOWN               = 0x00000387 // (0x187 | ACT_FLAG_STATIONARY)
	static ACT_THROWING                   = 0x80000588 // (0x188 | ACT_FLAG_MOVING | ACT_FLAG_THROWING)
	static ACT_HEAVY_THROW                = 0x80000589 // (0x189 | ACT_FLAG_MOVING | ACT_FLAG_THROWING)
	static ACT_PICKING_UP_BOWSER          = 0x00000390 // (0x190 | ACT_FLAG_STATIONARY)
	static ACT_HOLDING_BOWSER             = 0x00000391 // (0x191 | ACT_FLAG_STATIONARY)
	static ACT_RELEASING_BOWSER           = 0x00000392 // (0x192 | ACT_FLAG_STATIONARY)

	static INPUT_NONZERO_ANALOG         = 0x0001
	static INPUT_A_PRESSED              = 0x0002
	static INPUT_OFF_FLOOR              = 0x0004
	static INPUT_ABOVE_SLIDE            = 0x0008
	static INPUT_FIRST_PERSON           = 0x0010
	static INPUT_UNKNOWN_5              = 0x0020
	static INPUT_SQUISHED               = 0x0040
	static INPUT_A_DOWN                 = 0x0080
	static INPUT_IN_POISON_GAS          = 0x0100
	static INPUT_IN_WATER               = 0x0200
	static INPUT_STOMPED                = 0x0400
	static INPUT_INTERACT_OBJ_GRABBABLE = 0x0800
	static INPUT_UNKNOWN_12             = 0x1000
	static INPUT_B_PRESSED              = 0x2000
	static INPUT_Z_DOWN                 = 0x4000
	static INPUT_Z_PRESSED              = 0x8000

	static GROUND_STEP_LEFT_GROUND              = 0
	static GROUND_STEP_NONE                     = 1
	static GROUND_STEP_HIT_WALL                 = 2
	static GROUND_STEP_HIT_WALL_STOP_QSTEPS     = 2
	static GROUND_STEP_HIT_WALL_CONTINUE_QSTEPS = 3

	unk00 = 0
	input = 0
	flags = 0
	particleFlags = 0
	action = 0
	prevAction = 0
	terrainSoundAddend = 0
	actionState = 0
	actionTimer = 0
	actionArg = 0
	intendedMag = 0
	intendedYaw = 0
	invincTimer = 0
	framesSinceA = 0
	framesSinceB = 0
	wallKickTimer = 0
	doubleJumpTimer = 0
	faceAngle = new Int16Array(3)
	angleVel = new Int16Array(3)
	slideYaw = 0
	twirlYaw = 0
	pos = new Float32Array(3)
	vel = new Float32Array(3)
	forwardVel = 0
	slideVelX = 0
	slideVelZ = 0
	wall = null
	ceil = null
	floor = null
	ceilHeight = 0
	floorHeight = 0
	floorAngle = 0
	waterLevel = 0
	interactObj = null
	heldObj = null
	usedObj = null
	riddenObj = null
	marioObj = null
	spawnInfo = null
	area = null
	statusForCamera = null
	marioBodyState = null
	controller = null
	animList = null
	collidedObjInteractTypes = 0
	numCoins = 0
	numStars = 0
	numKeys = 0
	numLives = 0
	health = 0
	unkB0 = 0
	hurtCounter = 0
	healCounter = 0
	squishTimer = 0
	fadeWarpOpacity = 0
	capTimer = 0
	prevNumStarsForDialog = 0
	peakHeight = 0
	quicksandDepth = 0
	unkC4 = 0

	cameraYaw = 0
	forcedIntendedYaw = 0
	queuedCUp = false
	slideTerrain = true

	constructor(controller) {
		this.controller = controller
	}

	set_int_yaw(n) {
		this.forcedIntendedYaw = n
	}

	update_inputs() {
		this.input = 0

		this.update_button_inputs()
		this.update_joystick_inputs()
		this.update_geometry_inputs()

		if (this.queuedCUp) {
			this.input |= Mario.INPUT_FIRST_PERSON
		}

		if (this.controller.buttonPressed & Controller.U_CBUTTONS) {
			this.queuedCUp = true
		} else {
			this.queuedCUp = false
		}

		if (!(this.input & (Mario.INPUT_NONZERO_ANALOG | Mario.INPUT_A_PRESSED))) {
			this.input |= Mario.INPUT_UNKNOWN_5
		}

		if (this.wallKickTimer > 0) {
			this.wallKickTimer--
		}

		if (this.doubleJumpTimer > 0) {
			this.doubleJumpTimer--
		}
	}

	update_button_inputs() {
		if (this.controller.buttonPressed & Controller.A_BUTTON) {
			this.input |= Mario.INPUT_A_PRESSED
		}

		if (this.controller.buttonDown & Controller.A_BUTTON) {
			this.input |= Mario.INPUT_A_DOWN
		}

		if (this.squishTimer == 0) {
			if (this.controller.buttonPressed & Controller.B_BUTTON) {
				this.input |= Mario.INPUT_B_PRESSED
			}

			if (this.controller.buttonDown & Controller.Z_BUTTON) {
				this.input |= Mario.INPUT_Z_DOWN
			}

			if (this.controller.buttonPressed & Controller.Z_BUTTON) {
				this.input |= Mario.INPUT_Z_PRESSED
			}
		}

		if (this.input & Mario.INPUT_A_PRESSED) {
			this.framesSinceA = 0
		} else if (this.framesSinceA < 0xFF) {
			this.framesSinceA++
		}

		if (this.input & Mario.INPUT_B_PRESSED) {
			this.framesSinceB = 0
		} else if (this.framesSinceB < 0xFF) {
			this.framesSinceB++
		}
	}

	update_joystick_inputs() {
		let mag = (this.controller.stickMag / 64) * (this.controller.stickMag / 64) * 64

		if (this.squishTimer == 0) {
			this.intendedMag = mag / 2
		} else {
			this.intendedMag = mag / 8
		}

		if (this.intendedMag > 0) {
			this.intendedYaw = s16(atan2s(-this.controller.stickY, this.controller.stickX) + this.cameraYaw)
			this.input |= Mario.INPUT_NONZERO_ANALOG
		} else {
			this.intendedYaw = this.faceAngle[1]
		}

		if (this.forcedIntendedYaw != null) {
			this.intendedYaw = this.forcedIntendedYaw
			this.forcedIntendedYaw = null
		}
	}

	update_geometry_inputs() {
		({ x: this.pos[0], y: this.pos[1], z: this.pos[2] } = col.find_wall_collision(this.pos[0], this.pos[1], this.pos[2], 60, 50));
		({ x: this.pos[0], y: this.pos[1], z: this.pos[2] } = col.find_wall_collision(this.pos[0], this.pos[1], this.pos[2], 30, 24));

		({ floor: this.floor, height: this.floorHeight } = col.find_floor(this.pos[0], this.pos[1], this.pos[2]));
		({ ceil: this.ceil, height: this.ceilHeight } = col.vec3f_find_ceil(this.pos, this.floorHeight));

		this.floorAngle = s16(atan2s(this.floor.normal.z, this.floor.normal.x))

		if (this.floor_is_slippery()) {
			this.input |= Mario.INPUT_ABOVE_SLIDE
		}

		if (this.pos[1] > this.floorHeight + 100) {
			this.input |= Mario.INPUT_OFF_FLOOR
		}
	}

	floor_is_slippery() {
		if (this.slideTerrain && this.floor.normal.y < 0.9998477) {
			return true
		}

		let normY

		switch (this.get_floor_class()) {
			case Surface.SURFACE_VERY_SLIPPERY:
				normY = 0.9848077
				break

			case Surface.SURFACE_SLIPPERY:
				normY = 0.9396926
				break

			default:
				normY = 0.7880108
				break

			case Surface.SURFACE_NOT_SLIPPERY:
				normY = 0
				break
		}

		return this.floor.normal.y <= normY
	}

	floor_is_slope() {
		if (this.slideTerrain && this.floor.normal.y < 0.9998477) {
			return true
		}

		let normY

		switch (this.get_floor_class()) {
			case Surface.SURFACE_VERY_SLIPPERY:
				normY = 0.9961947
				break

			case Surface.SURFACE_SLIPPERY:
				normY = 0.9848077
				break

			default:
				normY = 0.9659258
				break

			case Surface.SURFACE_NOT_SLIPPERY:
				normY = 0.9396926
				break
		}

		return this.floor.normal.y <= normY
	}

	get_floor_class() {
		let floorClass

		if (this.slideTerrain) {
			floorClass = Surface.SURFACE_CLASS_VERY_SLIPPERY
		} else {
			floorClass = Surface.SURFACE_CLASS_DEFAULT
		}

		switch (this.floor.type) {
			case Surface.SURFACE_NOT_SLIPPERY:
			case Surface.SURFACE_HARD_NOT_SLIPPERY:
			case Surface.SURFACE_SWITCH:
				floorClass = Surface.SURFACE_CLASS_NOT_SLIPPERY
				break

			case Surface.SURFACE_SLIPPERY:
			case Surface.SURFACE_NOISE_SLIPPERY:
			case Surface.SURFACE_HARD_SLIPPERY:
			case Surface.SURFACE_NO_CAM_COL_SLIPPERY:
				floorClass = Surface.SURFACE_CLASS_SLIPPERY
				break

			case Surface.SURFACE_VERY_SLIPPERY:
			case Surface.SURFACE_ICE:
			case Surface.SURFACE_HARD_VERY_SLIPPERY:
			case Surface.SURFACE_NOISE_VERY_SLIPPERY_73:
			case Surface.SURFACE_NOISE_VERY_SLIPPERY_74:
			case Surface.SURFACE_NOISE_VERY_SLIPPERY:
			case Surface.SURFACE_NO_CAM_COL_VERY_SLIPPERY:
				floorClass = Surface.SURFACE_CLASS_VERY_SLIPPERY
				break
		}

		return floorClass
	}

	facing_downhill(turnYaw) {
		let yaw = this.faceAngle[1]

		if (turnYaw && this.forwardVel < 0) {
			yaw += 0x8000
		}

		yaw = s16(this.floorAngle - yaw)

		return -0x4000 < yaw && yaw < 0x4000
	}

	set_forward_vel(vel) {
		this.forwardVel = vel

		this.slideVelX = sins(this.faceAngle[1]) * this.forwardVel
		this.slideVelZ = coss(this.faceAngle[1]) * this.forwardVel

		this.vel[0] = this.slideVelX
		this.vel[2] = this.slideVelZ
	}

	bonk_reflection(negateSpeed) {
		if (this.wall) {
			let wallAngle = s16(atan2s(this.wall.normal.z, this.wall.normal.x))
			this.faceAngle[1] = this.faceAngle[1] - wallAngle
			this.faceAngle[1] = wallAngle - this.faceAngle[1]
		}

		if (negateSpeed) {
			this.set_forward_vel(-this.forwardVel)
		} else {
			this.faceAngle[1] += 0x8000
		}
	}
}

module.exports = Mario
